//Naive solution
//Time complexity O(N)

class Solution
{
  
    // n: size of array
    // x: element to find
    //Function to find index of element x in the array if it is present.
    static long closer(int arr[], int n, long x)
    {
        // add your code here
        long res  =-1;
        for(int i=0; i<n; i++){
            if(arr[i] == x){
                res = i;
                return res;
            }
        }
        
        return res;
    }
}

//Efficient solution
//Expected Time Complexity: O(Log(N)).
//Expected Auxiliary Space: O(1).

class Solution
{
    static long closer(int arr[], int n, long x)
    {
        // add your code here
        long res  =-1;
        
        int low =0, high = n-1;
        
        while(low <= high){
           int mid = (low+high) / 2;
            if(arr[mid] == x){
                return mid;
            }else if((mid - 1 > 0) && (arr[mid - 1] == x)){
                return mid - 1;
            }else if((mid + 1 < n) && (arr[mid + 1] == x)){
                return mid + 1;
            }else if(arr[mid] > x){
                high = mid - 1;
            }else {
                low = mid + 1;
            }
        }
        
        return res;
    }
}
