//Time Complexity - O(N)
//Auxiliary Space - O(N)

class Solution{
    public int minimumMagic(int n, int m, int price[], int magical_price[]){
        // Code Here.
            
        ArrayList<Integer> priceDifference = new ArrayList<Integer>();
        int totalPrice =0;
        
        for(int i=0; i<n; i++){
            priceDifference.add(price[i] - magical_price[i]);
            totalPrice+=price[i];
        }
        
        if(totalPrice<=m)
            return 0;
        
        Collections.sort(priceDifference, Collections.reverseOrder());
        
        int res =0;
        
        while(totalPrice>m && res<priceDifference.size()){
            totalPrice = totalPrice-priceDifference.get(res);
            res++;
            if(totalPrice<=m)
                return res;
        }
        
        return -1;
    }
}
