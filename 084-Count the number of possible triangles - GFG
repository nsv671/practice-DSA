//Naive solution
//Time complexity O(N^3)

class Solution
{
    //Function to count the number of possible triangles.
    static int findNumberOfTriangles(int arr[], int n)
    {
        // code here
        int res =0;

        for(int i=0; i<n-2; i++)
            for(int j=i+1; j<n-1; j++)
                for(int k=j+1; k<n; k++)
                    if(arr[i]+arr[j]>arr[k] && arr[i]+arr[k]>arr[j] && arr[k]+arr[j]>arr[i])
                        res++;
        
        return res;
    }
}

//Eficient solution
Expected Time Complexity: O(n2).
Expected Space Complexity: O(1).

class Solution
{
    //Function to count the number of possible triangles.
    static int findNumberOfTriangles(int arr[], int n)
    {
        // code here
        // Arrays.sort(arr);
        
        int res =0;
        
        Arrays.sort(arr);
        
        for(int i=n-1; i>1; i--){
            
            int low =0, high = i-1;
            while(high>low){
                //if 2nd last from the ith elemtn and lowest element having higher value then autometicallyin betweenn values also satisfy the condition
                if(arr[low]+arr[high]>arr[i]){
                    //in between value also satify the same condtion because arrlow is the losted element between the current sequence 
                    //so middle value also satis fy the condition
                    res += high-low;
                    high--;
                }else{
                    low++;
                }
            }
            
        }
        
        return res;
    }
}
