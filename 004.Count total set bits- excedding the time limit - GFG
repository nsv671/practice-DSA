class Solution{

/*
creating array of setbit count for all the number from 0 to 255
*/

    // functon for count setbit for a particular no from 0 to 255, in nth index
    static int setBitCount[] = new int[256];
    public static void init(){
        setBitCount[0]=0;
        // setBitCount[1]=1;
        for(int i=0; i<256; i++){
        //checking last bit is set or not if set the adding that to i/2th element of the array
            setBitCount[i] = (i&1)+setBitCount[i/2];
        }

    }
    
    //Function to return sum of count of set bits in the integers from 1 to n.
    public static int countSetBits(int n){
    
        // Your code here
        int count =0;
        init();
        for(int i=0; i<=n; i++){
        count += (setBitCount[i&0xff] + setBitCount[(i>>8)&0xff] + setBitCount[(i>>16)&0xff]+ setBitCount[(i>>24)&0xff]);
        }
        
        return count;
    }
}


//ANOTHER SOLUTION BUT TIME EXCEDDING TIME LIMIT

class Solution{
    
    //Function to return sum of count of set bits in the integers from 1 to n.
    public static int countSetBits(int n){
    
        // Your code here
        int count = 0;
        
        for(int i = 1; i<=n; i++){
            int temp = i;
            
            while(temp>0){
                count++;
                temp&=temp-1;
                // System.out.print("@"+count+"@ ");
                // System.out.println(temp);
            }
        }
        
       return count; 
    }
}


//time complecity Log(n)
class Solution{
    
    //Function to return sum of count of set bits in the integers from 1 to n.
    public static int countSetBits(int n){
    
        // Your code here
        //Ignoring 0 as all the bits are unset. 
        n+=1;
        int count=0;
        
        //Counting set bits from 1 to n.
        for(int i =2; i/2<n ; i = i*2){
            //Total count of pairs of 0s and 1s.
            int setBitGroup = n/i;
            
            //quotient gives the complete count of pairs of 1s.
            //Multiplying it with the (current power of 2)/2 will give
            //the count of 1s in the current bit.
            count += (setBitGroup*i/2);
            
            int reminder = n%i;
            
            //If the count of pairs is odd then we add the remaining 1s 
            //which could not be grouped together. 
            if(reminder > i/2)
             count+= reminder - i/2;
        }
        return count;
    }
}
