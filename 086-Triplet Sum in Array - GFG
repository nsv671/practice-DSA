//Naive solution
//Expected Time Complexity: O(n3)
//Expected Auxiliary Space: O(1)

class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int A[], int n, int X) { 
    
       // Your code Here
       //   Arrays.sort(A);
       
       for(int i=0; i<n-2; i++){
          for(int j = i+1; j<n-1; j++){
              for(int k = j+1; k<n; k++){
                  if(A[i]+A[j]+A[k] == X)
                   return true;
              }
          } 
       }
        
        return false;
    }
}



//Efficient solution
//Expected Time Complexity: O(n2)
//Expected Auxiliary Space: O(1)
//two pointer solution

class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int A[], int n, int X) { 
    
       // Your code Here
       Arrays.sort(A);
       
       for(int i=0; i<n; i++){
           int low =i+1, high = n-1;
           
           while(low<high){
               if(A[i]+A[low]+A[high] == X){
                   return true;
               }else if(A[i]+A[low]+A[high] > X){
                   high--;
               }else{
                   low++;
               }
           }
       }
        
        return false;
    }
}
