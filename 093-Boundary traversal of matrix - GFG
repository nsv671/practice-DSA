//Expected Time Complexity: O(N + M)
//Expected Auxiliary Space: O(1)

class Solution
{
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    static ArrayList<Integer> boundaryTraversal(int matrix[][], int n, int m)
    {
        // code here 
        int top=0, bottom = n-1;
        int left=0, right = m-1;
        
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        //to handle single row matrix case
        if(m==1){
            for(int i=0; i<n; i++)
                res.add(matrix[i][m-1]);
            
            return res;
        }
        
        //to handle single column matrix
        if(n==1){
            for(int i=0; i<m; i++)
                res.add(matrix[n-1][i]);
            
            return res;
        }
        
            //boundry traversal of matrix
            for(int i = 0; i<= right; i++)
                res.add(matrix[top][i]);
            
            for(int i = 1; i<=bottom; i++)
                res.add(matrix[i][right]);

            for(int i=right-1; i>=left; i--)
                res.add(matrix[bottom][i]);

            for(int i=bottom-1; i>0; i--)
                res.add(matrix[i][left]);
        
        
        return res;
    }
}
