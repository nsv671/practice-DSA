//EFFICIENT SOLUTION
//TIME COMPLEXITY O(n) AND AUXILIARY SPACE O(1) (depends on number of +ve number present in the array)

class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
        int shift = segrigate(arr, size);
        
        int arr2[] = new int[size-shift];
        int j=0;
        for(int i=shift; i<size; i++){
            arr2[j] = arr[i];
            j++;
        }
        
        // return findMissingPositive(arr2, j);
       
    }
    
    static int findMissingPositive(int arr[], int size)
    {
        int i;
        //marking arr[i] as visited by making arr[arr[i] - 1] negative. 
        //note that 1 is subtracted because indexing starts from 0 and 
        //positive numbers start from 1.
        for(i = 0; i < size; i++)
        {
            if(Math.abs(arr[i]) - 1 < size && arr[Math.abs(arr[i]) - 1] > 0)
            arr[Math.abs(arr[i]) - 1] = -arr[Math.abs(arr[i]) - 1];
        }
        
        for(i = 0; i < size; i++)
        {
            if (arr[i] > 0)
            {
                //returning the first index where value is positive.
                // 1 is added because indexing starts from 0.
                return i+1;
            }
        }
        return size+1;
    }
    
    
    static int segrigate(int arr[], int size){
        int count=0;
        for(int i=0; i<size ;i++){
            if(arr[i]<=0){
                int temp = arr[count];
                arr[count] = arr[i];
                arr[i] = temp;
                count++;
            }
        }
        return count;
    }
}


//TIME COMPLEXITY O(n) AND AUXILIARY SPACE O(n)
class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
        //creating array list to track the frequency of 0 to size+1 number
        //because smallest missing numbers maximum value can be size+1
        int res[] = new int[size+1];
        for(int i=0; i<size; i++){
            if(arr[i]>0 && arr[i]<=size)
                res[arr[i]]++;
        }
        
        //checking if any number from 1 to size having 0 frequency
        //if yes then returning the number
        for(int i=1; i<=size; i++)
            if(res[i]==0)
                return i;
        
        //if we don't have any number having 0 frequency in the res array we are returning the Size+1
        return size+1;
    }
}




//NAIVE SOLUTION
//TIME COMPLEXITY O(n^2)
//TIMELIMIT EXCEEDING

class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
         int n = 1000000;
         Your code here
         for(int i=1; i<=size+1; i++){
             boolean flag = false;
             for(int j=0; j<size; j++){
                 if(i==arr[j]) flag=true;
             }
            
             if(!flag) return i;
         }
        
         return -1;  
    }
}
