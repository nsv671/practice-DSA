//Time Complexity: O(N), as we are iterating over the array of size N.
//Space Complexity: O(N), as the set can have at max of N elements.

//GFG author solution
class Geeks {
    // Function to check if two numbers in array have sum equal to the given
    // sum.
    public static int sumExists(int arr[], int N, int sum) {
        // using HashSet to store the elements.
        HashSet<Integer> hs = new HashSet<>();

        // iterating over the array.
        for (int i = 0; i < N; i++) {
            int temp = sum - arr[i];

            // if (sum-arr[i]) or temp exists in HashSet, we return 1.
            if (temp >= 0 && hs.contains(temp)) {
                return 1;
            }
            // inserting current element in the HashSet.
            hs.add(arr[i]);
        }
        // if no such pair is present, we return 0.
        return 0;
    }
}

//my solution
class Geeks {
    public static int sumExists(int arr[], int N, int sum) {

        // Your code here
         HashSet<Integer> hs = new HashSet<Integer>();
        
        for(int i=0; i<N; i++){
            hs.add(arr[i]);
        }
        
        for(int i=0; i<N; i++){
            if(hs.contains(sum-arr[i]) && sum-arr[i] != arr[i])
                return 1;
        }
        
        return 0;
    }
}
