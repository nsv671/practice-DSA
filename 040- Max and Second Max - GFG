//Efficient solution
class Solution{
    
    // Function to find largest and second largest element in the array
    public static ArrayList<Integer> largestAndSecondLargest(int sizeOfArray, int arr[])
    {
        //code here.
        ArrayList<Integer> res = new ArrayList<Integer>(2);
        int largest = 0, secondLargest = -1;
        
        for(int i=1; i<sizeOfArray; i++){
            if(arr[largest]<arr[i]){
                secondLargest = largest;
                largest = i;
            } else if(arr[largest]!=arr[i]){
                if(secondLargest==-1 || arr[secondLargest]<arr[i]) secondLargest = i;
            }
        }
        
        res.add(arr[largest]);
        res.add(secondLargest==-1? -1: arr[secondLargest]);
        
        return res;
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

//less efficient then above one
class Solution{
    
    // Function to find largest and second largest element in the array
    public static ArrayList<Integer> largestAndSecondLargest(int sizeOfArray, int arr[])
    {
        //code here.
        int largest = getLargest(arr);
        
        ArrayList<Integer> res = new ArrayList<Integer>(2);
        res.add(largest);

        res.add(getSecondLargest(arr, largest));
        
        return res;
    }
    
    static int getLargest(int arr[]){
        int length = arr.length;
        
        int max = 0;
        
        for(int i = 0; i<length; i++){
            if(max<arr[i]) max=arr[i];
        }
        return max;
    }
    
    static int getSecondLargest(int arr[], int largest){
        int secondLargest = -1;
        
        for(int i = 0;i<arr.length ;i++){
            if(arr[i] != largest){
                if(secondLargest == -1){
                    secondLargest = arr[i];
                } else if(secondLargest<arr[i]){
                    secondLargest = arr[i];                    
                }
            }
        }      
        return secondLargest;    
    }
}
