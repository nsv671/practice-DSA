//EFFICIENT SOLUTION
//TIME COMPLEXITY O(n) AND AUXILIARY SPACE O(n)
class Solution{
    
    // A[]: input array
    // N: size of array
    // Function to find the maximum index difference.
    static int maxIndexDiff(int A[], int N) { 
        
        // Your code here
        if(N==1) return -1;
        
        int res =0;
        
        int minArray[] = new int[N];
        int maxArray[] = new int[N];
        
        minArray[0] = A[0];
        maxArray[N-1] = A[N-1];
        
        for(int i=1; i<N; i++){
            minArray[i] = Math.min(minArray[i-1], A[i]);
        }
        for(int i=N-2; i>=0; i--)
             maxArray[i] = Math.max(maxArray[i+1],A[i]);
        
        int j=0, k=0;
        
        //checking for each and every minArray[i]>maxArray[j]
        // and increasing the value accon=dingly
        while(j<N && k<N){
            if(minArray[j]>maxArray[k])
                j++;
            else{
                res = Math.max(res, k-j);
                k++;
            }
        }
        
        return res;
    }
}


//TIME LIMIT EXCEEDING
//BRUT FORCE SOLUTION

class Solution{
    
    // A[]: input array
    // N: size of array
    // Function to find the maximum index difference.
    static int maxIndexDiff(int A[], int N) { 
        
        // Your code here
        if(N==1) return -1;
        
        int res =0;
        
        for(int i=0; i<N; i++){
            for(int j=N-1; j>=0; j--)
                if(A[j]>=A[i])
                    res=Math.max(res, j-i);
        }
        return res;
        
    }
}
