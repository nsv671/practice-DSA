//Optimize solution
//TIME COMPLEXITY = O(n) and AUXILIARY SPACE = O(n)

class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        if(n<=2) return 0;
        
        int left_max_arr[] = new int[n];
        int right_max_arr[] = new int[n];
        
        left_max_arr[0] = arr[0];
        right_max_arr[n-1] =arr[n-1];
        
        long res = 0;
        
        leftMax(arr, left_max_arr);
        rightMax(arr, right_max_arr);
        
        left_max_arr[0] = 0;
        right_max_arr[n-1] =0;
        
        // for(int i=0; i<n; i++){
        //     System.out.println(i + " left-"+left_max_arr[i]+ " right-"+ right_max_arr[i]);
        // }
        
        for(int i=1; i<n-1; i++){
            if(Math.min(left_max_arr[i], right_max_arr[i])>arr[i])
                res += Math.min(left_max_arr[i], right_max_arr[i]) - arr[i];
        }
        
        return res;
    } 
    
    static void leftMax(int arr[], int left_max[]){
        int n = arr.length;
        
        if(n == 1) {
            left_max[0] =0;
            return ;
        }
        
        
        for(int i =1; i<n; i++){
            left_max[i] = Math.max(left_max[i-1], arr[i]);
        }
        
        return ;
    }
    
    static void rightMax(int arr[], int right_max[]){
        
        int n = arr.length;
        
        if(n == 1) {
            right_max[0] =0;
            return ;
        }
        
        for(int i =n-2; i>=0; i--){
            right_max[i] = Math.max(right_max[i+1], arr[i]);
        }
        
        return ;
    }
}

//SEME APPROCH AS ABOVE BUT WE ARE USING BUT NOT OPTIMIZED THE LEFT MAX and RIGHT MAX
//EXCEEDING THE TIME LIMIT

class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
        if(n<=2) return 0;
        
        int left_max_arr[] = new int[n];
        int right_max_arr[] = new int[n];
        
        left_max_arr[0] = 0;
        right_max_arr[n-1] =0;
        
        long res = 0;
        
        for(int i =1; i<n-1; i++){
            left_max_arr[i] = leftMax(arr, i);
            right_max_arr[i] = rightMax(arr, i);
        }
        
        for(int i=1; i<n-1; i++){
            if(Math.min(left_max_arr[i], right_max_arr[i])>arr[i])
                res += Math.min(left_max_arr[i], right_max_arr[i]) - arr[i];
        }
        
        return res;
    } 
    
    static int leftMax(int arr[], int position){
        int left_max = 0;
        if(position == 0) return 0;
        
        for(int i =0; i<position; i++){
            left_max = Math.max(left_max, arr[i]);
        }
        
        return left_max;
    }
    
    static int rightMax(int arr[], int position){
        int right_max = 0;
        if(position == arr.length) return 0;
        
        for(int i =position +1; i<arr.length; i++){
            right_max = Math.max(right_max, arr[i]);
        }
        
        return right_max;
    }
}
