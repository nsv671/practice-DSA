//Naive solution 
//Time limit exceeding
//Time complexciti O(n^3) and Auxiliary Space: O(1)
class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //add code here.
        if(n<3) return false;
        
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++)
                for(int k=j+1; k<n; k++)
                    if(arr[i]+arr[j]+arr[k] == 0)
                        return true;
        }
        
        return false;
    }
}

//Optimize solution
//Time complexciti O(n^2) and Auxiliary Space: O(1)
class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //add code here.
        if(n<3) return false;
        
        Arrays.sort(arr);
        
        for(int i = n-1; i>1; i--){
            int low =0, high = i-1;
            while(low<high){
                if(arr[low]+arr[high]+arr[i] == 0)
                    return true;
                else if(arr[low]+arr[high]+arr[i] > 0)
                    high--;
                else
                    low++;
            }
        }
        
        return false;
    }
}
