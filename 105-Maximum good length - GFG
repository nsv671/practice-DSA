//Brut force solution
//Time Complexity O(n^5 * log(n))
//Auxiliry Space O(1)

class Solution{
    public int maxGoodLength(int a[][]){
        int n = a.length;
        int m = a[0].length;

        int minLength = 0;
        int maxLength = Math.min(n, m);

        while (minLength <= maxLength) {
            int midLength = (minLength + maxLength) / 2;
            if (isGoodLength(a, midLength)) {
                minLength = midLength + 1;
            } else {
                maxLength = midLength - 1;
            }
        }

        return minLength - 1;
    }
    
    static boolean isGoodLength(int[][] a, int length){
        int n = a.length;
        int m = a[0].length;

        for (int i = 0; i <= n - length; i++) {
            for (int j = 0; j <= m - length; j++) {
                boolean valid = true;
                for (int x = i; x < i + length; x++) {
                    for (int y = j; y < j + length; y++) {
                        if (a[x][y] < length) {
                            valid = false;
                            break;
                        }
                    }
                    if (!valid) {
                        break;
                    }
                }
                if (valid) {
                    return true;
                }
            }
        }

        return false;
    }
}
